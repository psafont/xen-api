(*
 * Copyright (C) 2006-2009 Citrix Systems Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)
open Printf
open Datamodel_types
open Datamodel_utils
open Dm_api
module Unixext = Xapi_stdext_unix.Unixext

(*column widths for the autogenerated tables*)
let col_width_15 = 15

let col_width_20 = 20

let col_width_30 = 30

let col_width_40 = 40

let col_width_70 = 70

let destdir = "autogen"

let templatesdir = "templates"

let pad_right x max_width =
  let length = String.length x in
  if String.length x < max_width then
    x ^ String.make (max_width - length) ' '
  else
    x

let compare_case_ins x y =
  compare (String.lowercase_ascii x) (String.lowercase_ascii y)

let escape s =
  let esc_char = function
    | '\\' ->
        "&#92;"
    | '*' ->
        "&#42;"
    | '_' ->
        "&#95;"
    | '{' ->
        "&#123;"
    | '}' ->
        "&#125;"
    | '[' ->
        "&#91;"
    | ']' ->
        "&#93;"
    | '(' ->
        "&#40;"
    | ')' ->
        "&#41;"
    | '>' ->
        "&gt;"
    | '<' ->
        "&lt;"
    | '#' ->
        "&#35;"
    | '+' ->
        "&#43;"
    | '-' ->
        "&#45;"
    | '!' ->
        "&#33;"
    | c ->
        String.make 1 c
  in
  String.to_seq s |> Seq.map esc_char |> List.of_seq |> String.concat ""

let rec of_ty_verbatim = function
  | SecretString | String ->
      "string"
  | Int ->
      "int"
  | Float ->
      "float"
  | Bool ->
      "bool"
  | DateTime ->
      "datetime"
  | Enum (name, _) ->
      name
  | Set x ->
      sprintf "%s set" (of_ty_verbatim x)
  | Map (a, b) ->
      sprintf "(%s -> %s) map" (of_ty_verbatim a) (of_ty_verbatim b)
  | Ref obj ->
      obj ^ " ref"
  | Record obj ->
      obj ^ " record"
  | Option x ->
      sprintf "%s option" (of_ty_verbatim x)

let rec of_ty = function
  | String ->
      "string"
  | Int ->
      "int"
  | Float ->
      "float"
  | Bool ->
      "bool"
  | DateTime ->
      "datetime"
  | Enum (name, _) ->
      escape name
  | Set x ->
      of_ty x ^ " set"
  | Map (a, b) ->
      "(" ^ of_ty a ^ " &#45;&gt; " ^ of_ty b ^ ") map"
  | Ref obj ->
      escape obj ^ " ref"
  | Record obj ->
      escape obj ^ " record"
  | _ ->
      assert false

let of_ty_opt = function None -> "void" | Some (ty, _) -> of_ty ty

let of_ty_opt_verbatim = function
  | None ->
      "void"
  | Some (ty, _) ->
      of_ty_verbatim ty

let desc_of_ty_opt = function None -> "" | Some (_, desc) -> desc

let string_of_qualifier = function
  | StaticRO ->
      "_RO/constructor_"
  | DynamicRO ->
      "_RO/runtime_"
  | RW ->
      "_RW_"

let render_file (infile, outfile) json templates_dir dest_dir =
  let templ =
    Unixext.string_of_file (Filename.concat templates_dir infile)
    |> Mustache.of_string
  in
  let rendered = Mustache.render templ json in
  let io = open_out (Filename.concat dest_dir outfile) in
  Fun.protect
    (fun () -> output_string io rendered)
    ~finally:(fun () -> close_out io)

let generate_class cls =
  let fields = Datamodel_utils.all_fields_of_obj cls in
  let class_json =
    `O
      [
        ("class_name", `String (escape cls.name))
      ; ("class_descr", `String (escape cls.description))
      ; ("has_descr", `Bool (cls.description <> ""))
      ; ("class_deprecated", `Bool (cls.obj_lifecycle.state = Deprecated_s))
      ; ("class_removed", `Bool (cls.obj_lifecycle.state = Removed_s))
      ; ("is_event", `Bool (String.lowercase_ascii cls.name = "event"))
      ; ("has_fields", `Bool (fields <> []))
      ; ( "fields"
        , `A
            (fields
            |> List.sort (fun x y ->
                   compare_case_ins
                     (Datamodel_utils.wire_name_of_field x)
                     (Datamodel_utils.wire_name_of_field y)
               )
            |> List.map (fun field ->
                   `O
                     [
                       ( "field_name"
                       , `String
                           (pad_right
                              ("`"
                              ^ Datamodel_utils.wire_name_of_field field
                              ^ "`"
                              )
                              col_width_20
                           )
                       )
                     ; ( "field_type"
                       , `String
                           (pad_right
                              ("`" ^ of_ty_verbatim field.ty ^ "`")
                              col_width_20
                           )
                       )
                     ; ( "field_ctor"
                       , `String
                           (pad_right
                              (string_of_qualifier field.qualifier)
                              col_width_15
                           )
                       )
                     ; ( "field_descr"
                       , `String
                           (pad_right
                              (escape field.field_description)
                              col_width_40
                           )
                       )
                     ; ( "field_deprecated"
                       , `Bool
                           (field.lifecycle.state = Deprecated_s
                           || cls.obj_lifecycle.state = Deprecated_s
                           )
                       )
                     ; ( "field_removed"
                       , `Bool
                           (field.lifecycle.state = Removed_s
                           || cls.obj_lifecycle.state = Removed_s
                           )
                       )
                     ]
               )
            )
        )
      ; ("has_rpcs", `Bool (cls.messages <> []))
      ; ( "all_rpcs"
        , `A
            (cls.messages
            |> List.sort (fun x y -> compare_case_ins x.msg_name y.msg_name)
            |> List.map (fun msg ->
                   let is_event_from =
                     String.lowercase_ascii cls.name = "event"
                     && String.lowercase_ascii msg.msg_name = "from"
                   in
                   let rpc_param_csv =
                     msg.msg_params
                     |> List.map (fun p ->
                            of_ty_verbatim p.param_type ^ " " ^ p.param_name
                        )
                     |> String.concat ", "
                   in
                   let error_codes_csv =
                     msg.msg_errors
                     |> List.map (fun x -> sprintf "`%s`" x.err_name)
                     |> String.concat ", "
                   in
                   let rbac x =
                     match x.msg_allowed_roles with
                     | Some y when y <> [] ->
                         List.hd (List.rev y)
                     | _ ->
                         ""
                   in
                   `O
                     [
                       ("rpc_name_escaped", `String (escape msg.msg_name))
                     ; ("rpc_name", `String msg.msg_name)
                     ; ("rpc_descr", `String (escape msg.msg_doc))
                     ; ("rpc_has_descr", `Bool (msg.msg_doc <> ""))
                     ; ( "rpc_deprecated"
                       , `Bool
                           (msg.msg_lifecycle.state = Lifecycle.Deprecated_s
                           || cls.obj_lifecycle.state = Deprecated_s
                           )
                       )
                     ; ( "rpc_removed"
                       , `Bool
                           (msg.msg_lifecycle.state = Lifecycle.Removed_s
                           || cls.obj_lifecycle.state = Removed_s
                           )
                       )
                     ; ("returns_void", `Bool (msg.msg_result = None))
                     ; ( "return_type"
                       , `String
                           ( if is_event_from then
                               "event batch"
                             else
                               of_ty_opt_verbatim msg.msg_result
                           )
                       )
                     ; ( "return_descr"
                       , `String (escape (desc_of_ty_opt msg.msg_result))
                       )
                     ; ("rpc_param_csv", `String rpc_param_csv)
                     ; ("has_rbac", `Bool (rbac msg <> ""))
                     ; ("min_role", `String (rbac msg))
                     ; ("session", `Bool msg.msg_session)
                     ; ("has_rpc_params", `Bool (msg.msg_params <> []))
                     ; ( "rpc_params"
                       , `A
                           (msg.msg_params
                           |> List.map (fun p ->
                                  `O
                                    [
                                      ( "param_name"
                                      , `String
                                          (pad_right
                                             ("`" ^ p.param_name ^ "`")
                                             col_width_30
                                          )
                                      )
                                    ; ( "param_type"
                                      , `String
                                          (pad_right
                                             ("`"
                                             ^ of_ty_verbatim p.param_type
                                             ^ "`"
                                             )
                                             col_width_30
                                          )
                                      )
                                    ; ( "param_descr"
                                      , `String
                                          (pad_right (escape p.param_doc)
                                             col_width_40
                                          )
                                      )
                                    ]
                              )
                           )
                       )
                     ; ("has_error_codes", `Bool (msg.msg_errors <> []))
                     ; ("error_codes_csv", `String error_codes_csv)
                     ]
               )
            )
        )
      ]
  in
  render_file
    ("class.mustache", sprintf "class-%s.md" (String.lowercase_ascii cls.name))
    class_json templatesdir destdir

let generate_types system =
  let type_comparer x y =
    match (x, y) with
    | Enum (a, _), Enum (b, _) ->
        compare_case_ins a b
    | _ ->
        compare x y
  in
  let enums =
    Types.of_objects system
    |> List.filter (function Enum (_, _) -> true | _ -> false)
    |> List.sort type_comparer
  in
  let types_json =
    `O
      [
        ( "enums"
        , `A
            (List.map
               (function
                 | Enum (name, options) ->
                     `O
                       [
                         ("enum", `String name)
                       ; ( "enum_options"
                         , `A
                             (options
                             |> List.sort (fun (x, _) (y, _) ->
                                    compare_case_ins x y
                                )
                             |> List.map (fun (n, c) ->
                                    `O
                                      [
                                        ( "option_name"
                                        , `String
                                            (pad_right
                                               ("`" ^ n ^ "`")
                                               col_width_40
                                            )
                                        )
                                      ; ( "option_descr"
                                        , `String
                                            (pad_right (escape c) col_width_40)
                                        )
                                      ]
                                )
                             )
                         )
                       ]
                 | _ ->
                     `Null
                 )
               enums
            )
        )
      ]
  in
  render_file ("types.mustache", "types.md") types_json templatesdir destdir

let generate_relationships api =
  let relations = relations_of_api api in
  let relationships_json =
    `O
      [
        ( "relationships"
        , `A
            (List.map
               (function
                 | ((a, a_field), (b, b_field)) as rel ->
                     let c = Relations.classify api rel in
                     let afield = "`" ^ a ^ "." ^ a_field ^ "`" in
                     let bfield = "`" ^ b ^ "." ^ b_field ^ "`" in
                     `O
                       [
                         ( "a_field"
                         , `String (pad_right afield (col_width_40 - 2))
                         )
                       ; ( "b_field"
                         , `String (pad_right bfield (col_width_40 - 2))
                         )
                       ; ( "relationship"
                         , `String
                             (pad_right
                                (Relations.string_of_classification c)
                                col_width_15
                             )
                         )
                       ]
                 )
               relations
            )
        )
      ]
  in
  render_file
    ("relationships.mustache", "relationships-between-classes.md")
    relationships_json templatesdir destdir

let generate_classes system =
  let classes_json =
    `O
      [
        ( "classes"
        , `A
            (List.map
               (fun x ->
                 let notice y =
                   match y.obj_lifecycle.state with
                   | Removed_s ->
                       "**Removed**. "
                   | Deprecated_s ->
                       "**Deprecated**. "
                   | _ ->
                       ""
                 in
                 `O
                   [
                     ("name", `String x.name)
                   ; ("name_lower", `String (String.lowercase_ascii x.name))
                   ; ( "description"
                     , `String
                         (pad_right
                            (notice x ^ escape x.description)
                            col_width_70
                         )
                     )
                   ]
               )
               system
            )
        )
      ]
  in
  render_file
    ("classes.mustache", "classes.md")
    classes_json templatesdir destdir

let generate_toc system =
  let classes_json =
    `O
      [
        ( "classes"
        , `A
            (List.map
               (fun x ->
                 `O
                   [
                     ("name", `String x.name)
                   ; ("name_lower", `String (String.lowercase_ascii x.name))
                   ]
               )
               system
            )
        )
      ]
  in
  render_file ("toc.mustache", "toc.yml") classes_json templatesdir destdir

let generate_errors () =
  (* Sort the errors alphabetically, then generate one section per code. *)
  let errs =
    Hashtbl.fold (fun name err acc -> (name, err) :: acc) Datamodel.errors []
    |> List.sort (fun (n1, _) (n2, _) -> compare n1 n2)
    |> List.split
    |> snd
  in
  let error_json =
    `O
      [
        ( "errors"
        , `A
            (List.map
               (fun {err_name; err_params; err_doc} ->
                 `O
                   [
                     ("error_code", `String (escape err_name))
                   ; ("error_code_unescaped", `String err_name)
                   ; ("error_description", `String (escape err_doc))
                   ; ("parameters", `String (String.concat ", " err_params))
                   ]
               )
               errs
            )
        )
      ]
  in
  render_file
    ("api_errors.mustache", "api-errors.md")
    error_json templatesdir destdir

let all api =
  (* Remove private messages that are only used internally (e.g. get_record_internal) *)
  let api =
    Dm_api.filter
      (fun _ -> true)
      (fun _ -> true)
      (fun msg ->
        match msg.msg_tag with FromObject (Private _) -> false | _ -> true
      )
      api
  in
  let system =
    objects_of_api api |> List.sort (fun x y -> compare_case_ins x.name y.name)
  in

  List.iter generate_class system ;
  generate_classes system ;
  generate_relationships api ;
  generate_types system ;
  generate_errors () ;
  generate_toc system
